mat[i,j]  =  sum((datos2$Aeropuerto==aers[i]) & (datos2$Origen...Destino==aers[j]))
}
heatmaply(mat,cellnote=mat, Rowv = NA, Colv = NA, scale="column", col_dend_up=TRUE, ylab="Aeropuerto", xlab="Origen/Destino")%>%
layout(xaxis = list(side = "top"))
mat[i,j]  =  sum((datos2$Aeropuerto==aers[j]) & (datos2$Origen...Destino==aers[i]))
for(i in 1:length(aersA)){
for(j in 1:length(aersB)){
mat[i,j]  =  sum((datos2$Aeropuerto==aers[j]) & (datos2$Origen...Destino==aers[i]))
}
}
heatmaply(mat,cellnote=mat, Rowv = NA, Colv = NA, scale="column", col_dend_up=TRUE, ylab="Aeropuerto", xlab="Origen/Destino")%>%
layout(xaxis = list(side = "top"))
mat
length
length(aersB)
mat[i,j]  =  sum((datos2$Aeropuerto==aersA[i]) & (datos2$Origen...Destino==aersB[j]))
library(ggplot2)
aersA = unique(datos2$Aeropuerto)
aersB = unique(datos2$Origen...Destino)
mat = matrix(nrow = length(aersA), ncol = length(aersB))
row.names(mat) = aersA
colnames(mat) = aersB
for(i in 1:length(aersA)){
for(j in 1:length(aersB)){
mat[i,j]  =  sum((datos2$Aeropuerto==aersA[i]) & (datos2$Origen...Destino==aersB[j]))
}
}
#heatmap(mat,Colv = NA, Rowv = NA, scale="column")
library(heatmaply)
help("heatmaply")
heatmaply(mat,cellnote=mat, Rowv = NA, Colv = NA, scale="column", col_dend_up=TRUE, ylab="Aeropuerto", xlab="Origen/Destino")%>%
layout(xaxis = list(side = "top"))
heatmaply(mat,cellnote=mat, Rowv = NA, Colv = NA, col_dend_up=TRUE, ylab="Aeropuerto", xlab="Origen/Destino")%>%
layout(xaxis = list(side = "top"))
aersB - arsA
aersB - aersA
aersA in aersB
aersA
aersB
for(x in aersB){
if(not x in aersA)
if( x in aersA)
if(count((aersA==x))==0)
for(x in aersB){
if(count((aersA==x))==0)
aersC = c(aersC,x)
}
x
aersB
print(x)
for(x in aersB){
print(x)
if(count((aersA==x))==0)
{
aersC = c(aersC,x)
}
}
for(x in aersB){
print(x)
#if(count((aersA==x))==0)
#{
#  aersC = c(aersC,x)
#}
}
aersA
split(aersA," ")
split(aersA)
split(aersA,' ')
split(aersA,' ')==x
aersA==x)
aersA==x
count(aersA==x)
for(x in aersB){
print(x)
if(sum(aersA==x)==0)
{
aersC = c(aersC,x)
}
}
aersC
for(x in aersB){
print(x)
if(sum(aersA==x)==0)
{
aersC = c(aersC,x)
}
}
aersC = c()
aersC
aersC = c()
aersC
aersC = c('')
aersC
for(x in aersB){
print(x)
if(sum(aersA==x)==0)
{
aersC = c(aersC,x)
}
}
length(aersC)
aersA
aersB
aersC = NULL
for(x in aersB){
print(x)
if(sum(aersA==x)==0)
{
if(is.null(aersC)) aersC = c(x)
else aersC = c(aersC,x)
}
}
aersA
aersB
aersC = NULL
for(x in aersB){
if(sum(aersA==x)==0)
{
if(is.null(aersC)) aersC = c(x)
else aersC = c(aersC,x)
}
}
print(aersC)
aersC = NULL
for(x in aersB){
if(sum(aersA==x)==0)
{
if(is.null(aersC)) aersC = c(x)
else aersC = c(aersC,x)
}
}
print(aersC)
aersC = NULL
for(x in aersB){
if(sum(aersA==x)==0)
{
if(is.null(aersC)) aersC = c(x)
else aersC = c(aersC,x)
}
}
print(aersC)
sum(datos2$Aeropuerto==datos2$Origen...Destino)
length(datos2$Aeropuerto)
length(datos2$Aeropuerto)
sum(datos2$Aeropuerto==datos2$Origen...Destino)
length(datos2$Aeropuerto)
library(ggplot2)
aersA = unique(datos2$Aeropuerto)
aersB = unique(datos2$Origen...Destino)
mat = matrix(nrow = length(aersA), ncol = length(aersB))
row.names(mat) = aersA
colnames(mat) = aersB
for(i in 1:length(aersA)){
for(j in 1:length(aersB)){
mat[i,j]  =  sum((datos2$Aeropuerto==aersA[i]) & (datos2$Origen...Destino==aersB[j]))
}
}
#heatmap(mat,Colv = NA, Rowv = NA, scale="column")
library(heatmaply)
help("heatmaply")
heatmaply(mat,cellnote=mat, Rowv = NA, Colv = NA, col_dend_up=TRUE, ylab="Aeropuerto", xlab="Origen/Destino")%>%
layout(xaxis = list(side = "top"))
# Librerias
require(tidyverse)
require(geosphere)
require(rvest) # Cargamos el paquete
# Llamamos a los DataSets
datos_2021 = read.csv('Data/sna_abril_2021_fixed_encoding.csv', encoding = 'UTF-8', sep = ',')
# Concateno todos los datos
datos2= read_csv2('Data/202109-informe-ministerio.csv')
datos2$Fecha_completa = strptime(paste(datos2$Fecha, datos2$`Hora UTC`), format = "%d/%m/%Y %H:%M:%S")
# Utilizamos la tabla que se encuentra en 'https://en.wikipedia.org/wiki/List_of_airports_in_Argentina'
# para acceder a las variables de ciudad, provincia y coordenadas de cada aeropuerto
aeropuertos_wiki = read_html('https://en.wikipedia.org/wiki/List_of_airports_in_Argentina')
elemento_tabla   = html_element(aeropuertos_wiki,'.wikitable')
aeropuertos      = html_table(elemento_tabla)
# Corrijo la columna de coordenadas
separar     = strsplit((aeropuertos$Coordinates), '/') # Divide a los strings en los lugares donde haya '/'
coordenadas = sapply(separar, function(x) x[3])        # Me quedo solo con el 3er tipo de coordenada
coordenadas = gsub('[^0-9,.,-]','', coordenadas)           # Elimino los caracteres que no quiero utilizar
aeropuertos = aeropuertos %>%
mutate(lat = as.numeric(substr(coordenadas, 1, 9)), long = as.numeric(substr(coordenadas, 10, 18))) # Separo a mano latitud y longitud (revizar si esta todo en orden)
aeropuertos = filter(aeropuertos, nchar(ICAO)>1)
aeropuertos = aeropuertos[order(aeropuertos$ICAO),]
for(i in 1:length(aeropuertos$ICAO)){
inds = datos2$Aeropuerto==aeropuertos$IATA[i]
datos2[inds,c('ciudad_origen','provincia_origen','lat_origen','long_origen')] = aeropuertos[i,c("City served","Province","lat","long")]
inds = datos2$`Origen / Destino`==aeropuertos$IATA[i]
datos2[inds,c('ciudad_destino','provincia_destino','lat_destino','long_destino')] = aeropuertos[i,c("City served","Province","lat","long")]
}
for(i in 1:length(datos_2021$ana)){
inds = datos2$Aeropuerto==datos_2021$ana[i]
datos2[inds,c('ciudad_origen','provincia_origen','lat_origen','long_origen')] = datos_2021[i,c("nam","cpr","x","y")]
inds = datos2$`Origen / Destino`==datos_2021$ana[i]
datos2[inds,c('ciudad_destino','provincia_destino','lat_destino','long_destino')] = datos_2021[i,c("nam","cpr","x","y")]
inds = datos2$Aeropuerto==datos_2021$iko[i]
datos2[inds,c('ciudad_destino','provincia_destino','lat_destino','long_destino')] = datos_2021[i,c("nam","cpr","x","y")]
inds = datos2$`Origen / Destino`==datos_2021$iko[i]
datos2[inds,c('ciudad_destino','provincia_destino','lat_destino','long_destino')] = datos_2021[i,c("nam","cpr","x","y")]
}
datos2 = drop_na(datos2)
datos2$distancia = distHaversine(datos2[,c("long_origen","lat_origen")],datos2[,c("long_destino","lat_destino")])/1000
datos2 = datos2 %>%
filter(`Aerolinea Nombre` != 0)
datos2$fecha_hora = strptime(paste(datos2$Fecha, datos2$`Hora UTC`), format = "%d/%m/%Y %H:%M:%S")
despegues = datos2[datos2$`Tipo de Movimiento` == 'Despegue',]
aterrizajes = datos2[datos2$`Tipo de Movimiento` == 'Aterrizaje',]
# dividimos en despegues y aterrizajes
matched = left_join(despegues, aterrizajes, by= c("Aeropuerto" = "Origen / Destino", "Origen / Destino" = "Aeropuerto", "Aerolinea Nombre" = "Aerolinea Nombre", "Aeronave" = "Aeronave")) %>%
mutate(tdif = as.numeric(fecha_hora.y - fecha_hora.x, units='hours')) %>%
group_by(Aeropuerto, fecha_hora.x, Aeronave, `Aerolinea Nombre`) %>%
filter(tdif > 0) %>%
filter(tdif < 5) %>%
filter(tdif == min(tdif))
library(ggplot2)
aers = unique(datos2$Aeropuerto)
mat = matrix(nrow = length(aers), ncol = length(aers))
colnames(mat) = aers
row.names(mat) = aers
for(i in 1:length(aers)){
for(j in 1:length(aers)){
mat[i,j]  =  sum((datos2$Aeropuerto==aers[i]) & (datos2$`Origen / Destino`==aers[j]))
}
}
install.packages("heatmaply")
library(heatmaply)
help("heatmaply")
heatmaply(mat, Rowv = NA, Colv = NA,  col_dend_up=FALSE)%>%
layout(xaxis = list(side = "top"))
inicio = as.Date("2021-01-01")
matched$despegueUniversal = as.integer(-difftime(inicio,matched$Fecha_completa.x, units="hours"))
matched$llegadaUniversal = as.integer(-difftime(inicio,matched$Fecha_completa.y, units="hours")+0.9999)
fin = max(matched$llegadaUniversal)+1
histo = matrix(nrow=1,ncol=fin)
histo[,c(1:fin)] = 0
for(i in 1:length(matched$despegueUniversal)){
inds = matched$despegueUniversal[i]:matched$llegadaUniversal[i]
histo[1,inds] = histo[1,inds]+1
#print(histo[1,inds])
#for(j in matched$despegueUniversal[i]:matched$llegadaUniversal[i]){
#  histo[1,j] = histo[1,j]+1
#}
}
#plot(1:length(histo[1,]),histo[1,], type="s")
barplot(histo[1,], names.arg=(inicio + 1:fin/24), las = 2 , cex.names=0.4)
aerolineas = unique(matched$`Aerolinea Nombre`)
apps = matrix(nrow = 1, ncol = length(aerolineas))
colnames(apps) = aerolineas
for(ar in aerolineas){
apps[1,ar] = sum((matched$`Aerolinea Nombre`==ar))
}
apps = apps[1,order(apps, decreasing=T)]
barplot(apps, las = 2, cex.names=0.4)
x = 8
apps2 = apps[1:x]
apps2[x+1] = sum(apps[x:length(apps)])
names(apps2)[x+1] = "OTRAS"
names(apps2) = paste(names(apps2),apps2)
pie(apps2, col=rainbow(length(apps2)), cex=0.5)
# Librerias
require(tidyverse)
require(geosphere)
require(rvest) # Cargamos el paquete
require(lubridate)
# Llamamos a los DataSets
datos_2021 = read.csv('Data/sna_abril_2021_fixed_encoding.csv', encoding = 'UTF-8', sep = ',')
# Concateno todos los datos
datos2= read_csv2('Data/202109-informe-ministerio.csv')
datos2$Fecha_completa = strptime(paste(datos2$Fecha, datos2$`Hora UTC`), format = "%d/%m/%Y %H:%M:%S")
# Utilizamos la tabla que se encuentra en 'https://en.wikipedia.org/wiki/List_of_airports_in_Argentina'
# para acceder a las variables de ciudad, provincia y coordenadas de cada aeropuerto
aeropuertos_wiki = read_html('https://en.wikipedia.org/wiki/List_of_airports_in_Argentina')
elemento_tabla   = html_element(aeropuertos_wiki,'.wikitable')
aeropuertos      = html_table(elemento_tabla)
# Corrijo la columna de coordenadas
separar     = strsplit((aeropuertos$Coordinates), '/') # Divide a los strings en los lugares donde haya '/'
coordenadas = sapply(separar, function(x) x[3])        # Me quedo solo con el 3er tipo de coordenada
coordenadas = gsub('[^0-9,.,-]','', coordenadas)           # Elimino los caracteres que no quiero utilizar
aeropuertos = aeropuertos %>%
mutate(lat = as.numeric(substr(coordenadas, 1, 9)), long = as.numeric(substr(coordenadas, 10, 18))) # Separo a mano latitud y longitud (revizar si esta todo en orden)
aeropuertos = filter(aeropuertos, nchar(ICAO)>1)
aeropuertos = aeropuertos[order(aeropuertos$ICAO),]
for(i in 1:length(aeropuertos$ICAO)){
inds = datos2$Aeropuerto==aeropuertos$IATA[i]
datos2[inds,c('ciudad_origen','provincia_origen','lat_origen','long_origen')] = aeropuertos[i,c("City served","Province","lat","long")]
inds = datos2$`Origen / Destino`==aeropuertos$IATA[i]
datos2[inds,c('ciudad_destino','provincia_destino','lat_destino','long_destino')] = aeropuertos[i,c("City served","Province","lat","long")]
}
for(i in 1:length(datos_2021$ana)){
inds = datos2$Aeropuerto==datos_2021$ana[i]
datos2[inds,c('ciudad_origen','provincia_origen','lat_origen','long_origen')] = datos_2021[i,c("nam","cpr","x","y")]
inds = datos2$`Origen / Destino`==datos_2021$ana[i]
datos2[inds,c('ciudad_destino','provincia_destino','lat_destino','long_destino')] = datos_2021[i,c("nam","cpr","x","y")]
inds = datos2$Aeropuerto==datos_2021$iko[i]
datos2[inds,c('ciudad_destino','provincia_destino','lat_destino','long_destino')] = datos_2021[i,c("nam","cpr","x","y")]
inds = datos2$`Origen / Destino`==datos_2021$iko[i]
datos2[inds,c('ciudad_destino','provincia_destino','lat_destino','long_destino')] = datos_2021[i,c("nam","cpr","x","y")]
}
datos2 = drop_na(datos2)
datos2$distancia = distHaversine(datos2[,c("long_origen","lat_origen")],datos2[,c("long_destino","lat_destino")])/1000
datos2 = datos2 %>%
filter(`Aerolinea Nombre` != 0)
datos2$fecha_hora = strptime(paste(datos2$Fecha, datos2$`Hora UTC`), format = "%d/%m/%Y %H:%M:%S")
despegues = datos2[datos2$`Tipo de Movimiento` == 'Despegue',]
aterrizajes = datos2[datos2$`Tipo de Movimiento` == 'Aterrizaje',]
# dividimos en despegues y aterrizajes
matched = left_join(despegues, aterrizajes, by= c("Aeropuerto" = "Origen / Destino", "Origen / Destino" = "Aeropuerto", "Aerolinea Nombre" = "Aerolinea Nombre", "Aeronave" = "Aeronave")) %>%
mutate(tdif = as.numeric(fecha_hora.y - fecha_hora.x, units='hours')) %>%
group_by(Aeropuerto, fecha_hora.x, Aeronave, `Aerolinea Nombre`) %>%
filter(tdif > 0) %>%
filter(tdif < 5) %>%
filter(tdif == min(tdif))
library(ggplot2)
aers = unique(datos2$Aeropuerto)
mat = matrix(nrow = length(aers), ncol = length(aers))
colnames(mat) = aers
row.names(mat) = aers
for(i in 1:length(aers)){
for(j in 1:length(aers)){
mat[i,j]  =  sum((datos2$Aeropuerto==aers[i]) & (datos2$`Origen / Destino`==aers[j]))
}
}
install.packages("heatmaply")
library(heatmaply)
help("heatmaply")
heatmaply(mat, Rowv = NA, Colv = NA,  col_dend_up=FALSE)%>%
layout(xaxis = list(side = "top"))
inicio = as.Date("2021-01-01")
matched$despegueUniversal = as.integer(-difftime(inicio,matched$Fecha_completa.x, units="hours"))
matched$llegadaUniversal = as.integer(-difftime(inicio,matched$Fecha_completa.y, units="hours")+0.9999)
fin = max(matched$llegadaUniversal)+1
histo = matrix(nrow=1,ncol=fin)
histo[,c(1:fin)] = 0
for(i in 1:length(matched$despegueUniversal)){
inds = matched$despegueUniversal[i]:matched$llegadaUniversal[i]
histo[1,inds] = histo[1,inds]+1
#print(histo[1,inds])
#for(j in matched$despegueUniversal[i]:matched$llegadaUniversal[i]){
#  histo[1,j] = histo[1,j]+1
#}
}
#plot(1:length(histo[1,]),histo[1,], type="s")
barplot(histo[1,], names.arg=(inicio + 1:fin/24), las = 2 , cex.names=0.4)
aerolineas = unique(matched$`Aerolinea Nombre`)
apps = matrix(nrow = 1, ncol = length(aerolineas))
colnames(apps) = aerolineas
for(ar in aerolineas){
apps[1,ar] = sum((matched$`Aerolinea Nombre`==ar))
}
apps = apps[1,order(apps, decreasing=T)]
barplot(apps, las = 2, cex.names=0.4)
x = 8
apps2 = apps[1:x]
apps2[x+1] = sum(apps[x:length(apps)])
names(apps2)[x+1] = "OTRAS"
names(apps2) = paste(names(apps2),apps2)
pie(apps2, col=rainbow(length(apps2)), cex=0.5)
horario_vuelo = datos2 %>%
filter(datos2$Pasajeros > 0) %>%
group_by(horario = hour(`Hora UTC`)) %>%
summarise(pasajeros = mean(Pasajeros))
table(horario_vuelo$horario)
plot = horario_vuelo %>%
ggplot(aes(x = horario, y = pasajeros, color = pasajeros)) + geom_line() +
geom_point() +
transition_reveal(horario)+labs(title = 'Cantidad promedio de pasajeros a lo largo del dia', x = 'Hora', y = 'Cantidad promedio de pasajeros')+ shadow_mark()+ scale_x_continuous(breaks = round(seq(min(horario_vuelo$horario), max(horario_vuelo$horario), by = 1),1)) +
animate(plot, renderer = gifski_renderer(loop = FALSE))
horario_vuelo = datos2 %>%
filter(datos2$Pasajeros > 0) %>%
group_by(horario = hour(`Hora UTC`)) %>%
summarise(pasajeros = mean(Pasajeros))
table(horario_vuelo$horario)
plot = horario_vuelo %>%
ggplot(aes(x = horario, y = pasajeros, color = pasajeros)) + geom_line() +
geom_point() +
transition_reveal(horario)+labs(title = 'Cantidad promedio de pasajeros a lo largo del dia', x = 'Hora', y = 'Cantidad promedio de pasajeros')+ shadow_mark()+ scale_x_continuous(breaks = round(seq(min(horario_vuelo$horario), max(horario_vuelo$horario), by = 1),1)) +
animate(plot, renderer = gifski_renderer(loop = FALSE))
require(gganimate)
horario_vuelo = datos2 %>%
filter(datos2$Pasajeros > 0) %>%
group_by(horario = hour(`Hora UTC`)) %>%
summarise(pasajeros = mean(Pasajeros))
table(horario_vuelo$horario)
plot = horario_vuelo %>%
ggplot(aes(x = horario, y = pasajeros, color = pasajeros)) + geom_line() +
geom_point() +
transition_reveal(horario)+labs(title = 'Cantidad promedio de pasajeros a lo largo del dia', x = 'Hora', y = 'Cantidad promedio de pasajeros')+ shadow_mark()+ scale_x_continuous(breaks = round(seq(min(horario_vuelo$horario), max(horario_vuelo$horario), by = 1),1)) +
animate(plot, renderer = gifski_renderer(loop = FALSE))
plot = horario_vuelo %>%
ggplot(aes(x = horario, y = pasajeros, fill = pasajeros)) + geom_bar(stat='identity')+transition_states(horario,100,5)+shadow_mark()+labs(title = 'Cantidad promedio de pasajeros a lo largo del dia', x = 'Hora', y = 'Cantidad promedio de pasajeros')+ scale_x_continuous(breaks = round(seq(min(horario_vuelo$horario), max(horario_vuelo$horario), by = 1),1))
install.packages('gganimate')
install.packages('gganimate')
require(gganimate)
require(gganimate)
table(horario_vuelo$horario)
plot = horario_vuelo %>%
ggplot(aes(x = horario, y = pasajeros, color = pasajeros)) + geom_line() +
geom_point() +
transition_reveal(horario)+labs(title = 'Cantidad promedio de pasajeros a lo largo del dia', x = 'Hora', y = 'Cantidad promedio de pasajeros')+ shadow_mark()+ scale_x_continuous(breaks = round(seq(min(horario_vuelo$horario), max(horario_vuelo$horario), by = 1),1)) +
animate(plot, renderer = gifski_renderer(loop = FALSE))
install.packages('gganimate')
# Librerias
require(tidyverse)
require(geosphere)
require(rvest) # Cargamos el paquete
require(lubridate)
# Llamamos a los DataSets
datos_2021 = read.csv('Data/sna_abril_2021_fixed_encoding.csv', encoding = 'UTF-8', sep = ',')
# Concateno todos los datos
datos2= read_csv2('Data/202109-informe-ministerio.csv')
datos2$Fecha_completa = strptime(paste(datos2$Fecha, datos2$`Hora UTC`), format = "%d/%m/%Y %H:%M:%S")
# Utilizamos la tabla que se encuentra en 'https://en.wikipedia.org/wiki/List_of_airports_in_Argentina'
# para acceder a las variables de ciudad, provincia y coordenadas de cada aeropuerto
aeropuertos_wiki = read_html('https://en.wikipedia.org/wiki/List_of_airports_in_Argentina')
elemento_tabla   = html_element(aeropuertos_wiki,'.wikitable')
aeropuertos      = html_table(elemento_tabla)
# Corrijo la columna de coordenadas
separar     = strsplit((aeropuertos$Coordinates), '/') # Divide a los strings en los lugares donde haya '/'
coordenadas = sapply(separar, function(x) x[3])        # Me quedo solo con el 3er tipo de coordenada
coordenadas = gsub('[^0-9,.,-]','', coordenadas)           # Elimino los caracteres que no quiero utilizar
aeropuertos = aeropuertos %>%
mutate(lat = as.numeric(substr(coordenadas, 1, 9)), long = as.numeric(substr(coordenadas, 10, 18))) # Separo a mano latitud y longitud (revizar si esta todo en orden)
aeropuertos = filter(aeropuertos, nchar(ICAO)>1)
aeropuertos = aeropuertos[order(aeropuertos$ICAO),]
for(i in 1:length(aeropuertos$ICAO)){
inds = datos2$Aeropuerto==aeropuertos$IATA[i]
datos2[inds,c('ciudad_origen','provincia_origen','lat_origen','long_origen')] = aeropuertos[i,c("City served","Province","lat","long")]
inds = datos2$`Origen / Destino`==aeropuertos$IATA[i]
datos2[inds,c('ciudad_destino','provincia_destino','lat_destino','long_destino')] = aeropuertos[i,c("City served","Province","lat","long")]
}
for(i in 1:length(datos_2021$ana)){
inds = datos2$Aeropuerto==datos_2021$ana[i]
datos2[inds,c('ciudad_origen','provincia_origen','lat_origen','long_origen')] = datos_2021[i,c("nam","cpr","x","y")]
inds = datos2$`Origen / Destino`==datos_2021$ana[i]
datos2[inds,c('ciudad_destino','provincia_destino','lat_destino','long_destino')] = datos_2021[i,c("nam","cpr","x","y")]
inds = datos2$Aeropuerto==datos_2021$iko[i]
datos2[inds,c('ciudad_destino','provincia_destino','lat_destino','long_destino')] = datos_2021[i,c("nam","cpr","x","y")]
inds = datos2$`Origen / Destino`==datos_2021$iko[i]
datos2[inds,c('ciudad_destino','provincia_destino','lat_destino','long_destino')] = datos_2021[i,c("nam","cpr","x","y")]
}
datos2 = drop_na(datos2)
datos2$distancia = distHaversine(datos2[,c("long_origen","lat_origen")],datos2[,c("long_destino","lat_destino")])/1000
datos2 = datos2 %>%
filter(`Aerolinea Nombre` != 0)
datos2$fecha_hora = strptime(paste(datos2$Fecha, datos2$`Hora UTC`), format = "%d/%m/%Y %H:%M:%S")
despegues = datos2[datos2$`Tipo de Movimiento` == 'Despegue',]
aterrizajes = datos2[datos2$`Tipo de Movimiento` == 'Aterrizaje',]
# dividimos en despegues y aterrizajes
matched = left_join(despegues, aterrizajes, by= c("Aeropuerto" = "Origen / Destino", "Origen / Destino" = "Aeropuerto", "Aerolinea Nombre" = "Aerolinea Nombre", "Aeronave" = "Aeronave")) %>%
mutate(tdif = as.numeric(fecha_hora.y - fecha_hora.x, units='hours')) %>%
group_by(Aeropuerto, fecha_hora.x, Aeronave, `Aerolinea Nombre`) %>%
filter(tdif > 0) %>%
filter(tdif < 5) %>%
filter(tdif == min(tdif))
library(ggplot2)
aers = unique(datos2$Aeropuerto)
mat = matrix(nrow = length(aers), ncol = length(aers))
colnames(mat) = aers
row.names(mat) = aers
for(i in 1:length(aers)){
for(j in 1:length(aers)){
mat[i,j]  =  sum((datos2$Aeropuerto==aers[i]) & (datos2$`Origen / Destino`==aers[j]))
}
}
install.packages("heatmaply")
library(heatmaply)
help("heatmaply")
heatmaply(mat, Rowv = NA, Colv = NA,  col_dend_up=FALSE)%>%
layout(xaxis = list(side = "top"))
inicio = as.Date("2021-01-01")
matched$despegueUniversal = as.integer(-difftime(inicio,matched$Fecha_completa.x, units="hours"))
matched$llegadaUniversal = as.integer(-difftime(inicio,matched$Fecha_completa.y, units="hours")+0.9999)
fin = max(matched$llegadaUniversal)+1
histo = matrix(nrow=1,ncol=fin)
histo[,c(1:fin)] = 0
for(i in 1:length(matched$despegueUniversal)){
inds = matched$despegueUniversal[i]:matched$llegadaUniversal[i]
histo[1,inds] = histo[1,inds]+1
#print(histo[1,inds])
#for(j in matched$despegueUniversal[i]:matched$llegadaUniversal[i]){
#  histo[1,j] = histo[1,j]+1
#}
}
#plot(1:length(histo[1,]),histo[1,], type="s")
barplot(histo[1,], names.arg=(inicio + 1:fin/24), las = 2 , cex.names=0.4)
aerolineas = unique(matched$`Aerolinea Nombre`)
apps = matrix(nrow = 1, ncol = length(aerolineas))
colnames(apps) = aerolineas
for(ar in aerolineas){
apps[1,ar] = sum((matched$`Aerolinea Nombre`==ar))
}
apps = apps[1,order(apps, decreasing=T)]
barplot(apps, las = 2, cex.names=0.4)
x = 8
apps2 = apps[1:x]
apps2[x+1] = sum(apps[x:length(apps)])
names(apps2)[x+1] = "OTRAS"
names(apps2) = paste(names(apps2),apps2)
pie(apps2, col=rainbow(length(apps2)), cex=0.5)
require(gganimate)
install.packages('gganimate')
horario_vuelo = datos2 %>%
filter(datos2$Pasajeros > 0) %>%
group_by(horario = hour(`Hora UTC`)) %>%
summarise(pasajeros = mean(Pasajeros))
table(horario_vuelo$horario)
plot = horario_vuelo %>%
ggplot(aes(x = horario, y = pasajeros, color = pasajeros)) + geom_line() +
geom_point() +
transition_reveal(horario)+labs(title = 'Cantidad promedio de pasajeros a lo largo del dia', x = 'Hora', y = 'Cantidad promedio de pasajeros')+ shadow_mark()+ scale_x_continuous(breaks = round(seq(min(horario_vuelo$horario), max(horario_vuelo$horario), by = 1),1)) +
animate(plot, renderer = gifski_renderer(loop = FALSE))
install.packages("gganimate")
