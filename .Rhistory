datos_2014 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2014.csv', encoding = 'latin1', sep = ';')
datos_2015 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2015.csv', encoding = 'latin1', sep = ';')
datos_2016 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2016.csv', encoding = 'latin1', sep = ';')
datos_2017 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2017.csv', encoding = 'latin1', sep = ';')
datos_2017 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2017.csv', encoding = 'latin1', sep = ';')
datos_2018 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2018.csv', encoding = 'latin1', sep = ';')
datos_2019 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2019.csv', encoding = 'latin1', sep = ';')
datos_2020 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2020.csv', encoding = 'latin1', sep = ';')
# Librerias
require(tidyverse)
install.packages(geosphere)
install.packages('geosphere')
require(geosphere)
require(geosphere)
View(datos_2016)
# Llamamos a los DataSets
datos_2014 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2014.csv', encoding = 'latin1', sep = ';')
datos_2015 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2015.csv', encoding = 'latin1', sep = ';')
datos_2016 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2016.csv', encoding = 'latin1', sep = ';')
datos_2017 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2017.csv', encoding = 'latin1', sep = ';')
datos_2018 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2018.csv', encoding = 'latin1', sep = ';')
datos_2019 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2019.csv', encoding = 'latin1', sep = ';')
datos_2020 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2020.csv', encoding = 'latin1', sep = ';')
# Concateno todos los datos
datos = rbind(datos_2014,datos_2015,datos_2016,datos_2017,datos_2018,datos_2019,datos_2020)
datos2= read.csv('../TP_LaboDeDatos/Data/202109-informe-ministerio.csv', encoding = 'latin1', sep = ';')
# Librerias
require(tidyverse)
require(geosphere)
require(rvest) # Cargamos el paquete
# Llamamos a los DataSets
datos_2014 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2014.csv', encoding = 'latin1', sep = ';')
datos_2015 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2015.csv', encoding = 'latin1', sep = ';')
datos_2016 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2016.csv', encoding = 'latin1', sep = ';')
datos_2017 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2017.csv', encoding = 'latin1', sep = ';')
datos_2018 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2018.csv', encoding = 'latin1', sep = ';')
datos_2019 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2019.csv', encoding = 'latin1', sep = ';')
datos_2020 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2020.csv', encoding = 'latin1', sep = ';')
# Concateno todos los datos
datos = rbind(datos_2014,datos_2015,datos_2016,datos_2017,datos_2018,datos_2019,datos_2020)
datos2= read.csv('../TP_LaboDeDatos/Data/202109-informe-ministerio.csv', encoding = 'latin1', sep = ';')
View(datos2)
View(datos2)
# Utilizamos la tabla que se encuentra en 'https://en.wikipedia.org/wiki/List_of_airports_in_Argentina'
# para acceder a las variables de ciudad, provincia y coordenadas de cada aeropuerto
aeropuertos_wiki = read_html('https://en.wikipedia.org/wiki/List_of_airports_in_Argentina')
elemento_tabla   = html_element(aeropuertos_wiki,'.wikitable')
aeropuertos      = html_table(elemento_tabla)
# Variables utiles
N = dim(datos)[1]
cant_aeropuertos = dim(aeropuertos)[1]
# Corrijo la columna de coordenadas
separar     = strsplit((aeropuertos$Coordinates), '/') # Divide a los strings en los lugares donde haya '/'
coordenadas = sapply(separar, function(x) x[3])        # Me quedo solo con el 3er tipo de coordenada
coordenadas = gsub('[^0-9,.,-]','', coordenadas)           # Elimino los caracteres que no quiero utilizar
aeropuertos = aeropuertos %>%
mutate(lat = as.numeric(substr(coordenadas, 1, 9)), long = as.numeric(substr(coordenadas, 10, 18))) # Separo a mano latitud y longitud (revizar si esta todo en orden)
aeropuertos = filter(aeropuertos, nchar(ICAO)>1)
aeropuertos = aeropuertos[order(aeropuertos$ICAO),]
#Por ahora esta parte no sirve pero está bueno tenerla
# Agregando Ciudades
N2 = length(datos2$Hora.UTC)
datos2$ciudad_origen     = rep(NA, length(N2))
datos2$ciudad_destino    = rep(NA, length(N2))
datos2$provincia_origen  = rep(NA, length(N2))
datos2$provincia_destino = rep(NA, length(N2))
datos2$lat_origen        = rep(NA, length(N2))
datos2$long_origen       = rep(NA, length(N2))
datos2$lat_destino       = rep(NA, length(N2))
datos2$long_destino      = rep(NA, length(N2))
# datos %>% mutate(ciudad_origen = ) # Aca queria hacer exactamente lo de arriba pero usando dplyr
# El algoritmo de abajo ndar anda, tarda un monton. Hay que agregar el resto de las variables
for(i in 1:length(aeropuertos$ICAO)){
inds = datos$Origen.OACI==aeropuertos$ICAO[i]
datos2[inds,c('ciudad_origen','provincia_origen','lat_origen','long_origen')] = aeropuertos[i,c("City served","Province","lat","long")]
inds = datos2$Origen==aeropuertos$IATA[i]
datos2[inds,c('ciudad_destino','provincia_destino','lat_destino','long_destino')] = aeropuertos[i,c("City served","Province","lat","long")]
}
#Por ahora esta parte no sirve pero está bueno tenerla
# Agregando Ciudades
N2 = length(datos2$Hora.UTC)
datos2$ciudad_origen     = rep(NA, length(N2))
datos2$ciudad_destino    = rep(NA, length(N2))
datos2$provincia_origen  = rep(NA, length(N2))
datos2$provincia_destino = rep(NA, length(N2))
datos2$lat_origen        = rep(NA, length(N2))
datos2$long_origen       = rep(NA, length(N2))
datos2$lat_destino       = rep(NA, length(N2))
datos2$long_destino      = rep(NA, length(N2))
# datos %>% mutate(ciudad_origen = ) # Aca queria hacer exactamente lo de arriba pero usando dplyr
# El algoritmo de abajo ndar anda, tarda un monton. Hay que agregar el resto de las variables
for(i in 1:length(aeropuertos$ICAO)){
inds = datos2$Aeropuerto==aeropuertos$IATA[i]
datos2[inds,c('ciudad_origen','provincia_origen','lat_origen','long_origen')] = aeropuertos[i,c("City served","Province","lat","long")]
inds = datos2$Origen...Destino==aeropuertos$IATA[i]
datos2[inds,c('ciudad_destino','provincia_destino','lat_destino','long_destino')] = aeropuertos[i,c("City served","Province","lat","long")]
}
View(datos2)
View(datos2)
datos2 = drop_na(datos2)
print(length(datos2))
print(length(datos2$Fecha))
datos2$distancia = distHaversine(c(datos2$long_origen,datos2$lat_origen),c(datos2$long_destino,datos2$lat_destino))
datos2$distancia = distHaversine(datos2[c("long_origen","lat_origen"),],datos2[c("long_origen","lat_origen"),])
datos2[c("long_origen","lat_origen"),]
datos2[,c("long_origen","lat_origen")]
datos2$distancia = distHaversine(datos2[,c("long_origen","lat_origen")],datos2[,c("long_origen","lat_origen")])
datos2$distancia = distHaversine(datos2[,c("long_origen","lat_origen")],datos2[,c("long_destino","lat_destino")])
datos$distancia = distHaversine(datos[,c("long_origen","lat_origen")],datos[,c("long_destino","lat_destino")])
#Por ahora esta parte no sirve pero está bueno tenerla
# Agregando Ciudades
datos$ciudad_origen     = rep(NA, length(N))
datos$ciudad_destino    = rep(NA, length(N))
datos$provincia_origen  = rep(NA, length(N))
datos$provincia_destino = rep(NA, length(N))
datos$lat_origen        = rep(NA, length(N))
datos$long_origen       = rep(NA, length(N))
datos$lat_destino       = rep(NA, length(N))
datos$long_destino      = rep(NA, length(N))
# datos %>% mutate(ciudad_origen = ) # Aca queria hacer exactamente lo de arriba pero usando dplyr
# El algoritmo de abajo ndar anda, tarda un monton. Hay que agregar el resto de las variables
for(i in 1:length(aeropuertos$ICAO)){
inds = datos$Origen.OACI==aeropuertos$ICAO[i]
datos[inds,c('ciudad_origen','provincia_origen','lat_origen','long_origen')] = aeropuertos[i,c("City served","Province","lat","long")]
inds = datos$Origen.OACI==aeropuertos$ICAO[i]
datos[inds,c('ciudad_destino','provincia_destino','lat_destino','long_destino')] = aeropuertos[i,c("City served","Province","lat","long")]
}
datos = drop_na(datos)
datos$distancia = distHaversine(datos[,c("long_origen","lat_origen")],datos[,c("long_destino","lat_destino")])
# Llamamos a los DataSets
datos_2014 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2014.csv', encoding = 'latin1', sep = ';')
datos_2015 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2015.csv', encoding = 'latin1', sep = ';')
datos_2016 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2016.csv', encoding = 'latin1', sep = ';')
datos_2017 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2017.csv', encoding = 'latin1', sep = ';')
datos_2018 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2018.csv', encoding = 'latin1', sep = ';')
datos_2019 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2019.csv', encoding = 'latin1', sep = ';')
datos_2020 = read.csv('../TP_LaboDeDatos/Data/aterrizajes-y-despegues-registrados-por-eana-2020.csv', encoding = 'latin1', sep = ';')
# Concateno todos los datos
datos = rbind(datos_2014,datos_2015,datos_2016,datos_2017,datos_2018,datos_2019,datos_2020)
datos2= read.csv('../TP_LaboDeDatos/Data/202109-informe-ministerio.csv', encoding = 'latin1', sep = ';')
# Librerias
require(tidyverse)
require(geosphere)
require(rvest) # Cargamos el paquete
# Utilizamos la tabla que se encuentra en 'https://en.wikipedia.org/wiki/List_of_airports_in_Argentina'
# para acceder a las variables de ciudad, provincia y coordenadas de cada aeropuerto
aeropuertos_wiki = read_html('https://en.wikipedia.org/wiki/List_of_airports_in_Argentina')
elemento_tabla   = html_element(aeropuertos_wiki,'.wikitable')
aeropuertos      = html_table(elemento_tabla)
# Variables utiles
N = dim(datos)[1]
cant_aeropuertos = dim(aeropuertos)[1]
# Corrijo la columna de coordenadas
separar     = strsplit((aeropuertos$Coordinates), '/') # Divide a los strings en los lugares donde haya '/'
coordenadas = sapply(separar, function(x) x[3])        # Me quedo solo con el 3er tipo de coordenada
coordenadas = gsub('[^0-9,.,-]','', coordenadas)           # Elimino los caracteres que no quiero utilizar
aeropuertos = aeropuertos %>%
mutate(lat = as.numeric(substr(coordenadas, 1, 9)), long = as.numeric(substr(coordenadas, 10, 18))) # Separo a mano latitud y longitud (revizar si esta todo en orden)
aeropuertos = filter(aeropuertos, nchar(ICAO)>1)
aeropuertos = aeropuertos[order(aeropuertos$ICAO),]
#Por ahora esta parte no sirve pero está bueno tenerla
# Agregando Ciudades
N2 = length(datos2$Hora.UTC)
datos2$ciudad_origen     = rep(NA, length(N2))
datos2$ciudad_destino    = rep(NA, length(N2))
datos2$provincia_origen  = rep(NA, length(N2))
datos2$provincia_destino = rep(NA, length(N2))
datos2$lat_origen        = rep(NA, length(N2))
datos2$long_origen       = rep(NA, length(N2))
datos2$lat_destino       = rep(NA, length(N2))
datos2$long_destino      = rep(NA, length(N2))
# datos %>% mutate(ciudad_origen = ) # Aca queria hacer exactamente lo de arriba pero usando dplyr
# El algoritmo de abajo ndar anda, tarda un monton. Hay que agregar el resto de las variables
for(i in 1:length(aeropuertos$ICAO)){
inds = datos2$Aeropuerto==aeropuertos$IATA[i]
datos2[inds,c('ciudad_origen','provincia_origen','lat_origen','long_origen')] = aeropuertos[i,c("City served","Province","lat","long")]
inds = datos2$Origen...Destino==aeropuertos$IATA[i]
datos2[inds,c('ciudad_destino','provincia_destino','lat_destino','long_destino')] = aeropuertos[i,c("City served","Province","lat","long")]
}
datos2 = drop_na(datos2)
datos2$distancia = distHaversine(datos2[,c("long_origen","lat_origen")],datos2[,c("long_destino","lat_destino")])
unique(datos2$Aeropuerto)
library(plotly)
library(ggplot2)
ggplot(datos2,aes(x=Aeropuerto,y=Origen...Destino))
aes(x=Aeropuerto,y=Origen...Destino)
datos2
View(datos2)
View(datos2)
unique(datos2$Origen...Destino)
ggplot(datos2,aes(x=Aeropuerto,y=Origen...Destino))
ggplot(datos2,aes(x=Aeropuerto,y=Origen...Destino))  +geom_density2d()
ggplot(datos2,aes(x=Aeropuerto,y=Origen...Destino))  + geom_density2d() +
labs(y = "bitterness (IBU)",
x = "alcohol volume (ABV)",
title = "Craft beers from American breweries")
ggplot(datos2,aes(x=Aeropuerto,y=Origen...Destino))  + geom_density2d() +
labs(y = "bitterness (IBU)",
x = "alcohol volume (ABV)",
title = "Craft beers from American breweries")
Aeropuerto
ggplot(datos2,aes(x=Aeropuerto,y=Origen...Destino))
geom_density2d()
ggplot(datos2,aes(x=Aeropuerto,y=Origen...Destino))  + geom_density2d()
ggplot(datos2,aes(x=lat_origen,y=lat_destino))  + geom_density2d() +
labs(y = "bitterness (IBU)",
x = "alcohol volume (ABV)",
title = "Craft beers from American breweries")
ggplot(datos2,aes(x=lat_origen,y=long_origen))  + geom_density2d() +
labs(y = "bitterness (IBU)",
x = "alcohol volume (ABV)",
title = "Craft beers from American breweries")
ggplot(datos2,aes(x=aeropuerto,y=long_origen))  + geom_density2d() +
labs(y = "bitterness (IBU)",
x = "alcohol volume (ABV)",
title = "Craft beers from American breweries")
ggplot(datos2,aes(x=aeropuerto,y=long_origen))
ggplot(datos2,aes(x=Aeropuerto,y=long_origen))
ggplot(datos2,aes(x=Aeropuerto,y=long_origen))  +
labs(y = "bitterness (IBU)",
x = "alcohol volume (ABV)",
title = "Craft beers from American breweries")
ggplot(datos2,aes(x=Aeropuerto,y=long_origen))  + pivot_longer()
plot(x=datos2$Aeropuerto,y=datos2$Origen...Destino)
library(ggplot2)
aers = unique(datos2$Aeropuerto)
mat = matrix(nrow = length(aers), ncol = length(aers))
mat
for(i in 1:length(aers)){
for(j in i:length(aers)){
mat[i][j] = mat[j][i] = count(datos2$Aeropuerto==aers[i] && datos2$Origen...Destino==aers[j])
}
}
mat[i][j] = mat[j][i] = count((datos2$Aeropuerto==aers[i]) && (datos2$Origen...Destino==aers[j]))
(datos2$Origen...Destino==aers[j])
(datos2$Aeropuerto==aers[i])
(datos2$Aeropuerto==aers[i]) && (datos2$Origen...Destino==aers[j])
(datos2$Aeropuerto==aers[i]) & (datos2$Origen...Destino==aers[j])
mat[i][j] = mat[j][i] = count((datos2$Aeropuerto==aers[i]) & (datos2$Origen...Destino==aers[j]))
for(i in 1:length(aers)){
for(j in i:length(aers)){
mat[i][j] = mat[j][i] = count((datos2$Aeropuerto==aers[i]) & (datos2$Origen...Destino==aers[j]))
}
}
mat[i][j] = mat[j][i] = sum((datos2$Aeropuerto==aers[i]) & (datos2$Origen...Destino==aers[j]))
for(i in 1:length(aers)){
for(j in i:length(aers)){
mat[i][j] = mat[j][i] = sum((datos2$Aeropuerto==aers[i]) & (datos2$Origen...Destino==aers[j]))
}
}
mat
mat[i][j] = mat[j][i] = 1
for(i in 1:length(aers)){
for(j in i:length(aers)){
mat[i][j] = mat[j][i] = 1
sum((datos2$Aeropuerto==aers[i]) & (datos2$Origen...Destino==aers[j]))
}
}
mat
mat[i,j] = mat[j,i] = 1
for(i in 1:length(aers)){
for(j in i:length(aers)){
mat[i,j] = mat[j,i] = 1
sum((datos2$Aeropuerto==aers[i]) & (datos2$Origen...Destino==aers[j]))
}
}
mat
for(i in 1:length(aers)){
for(j in i:length(aers)){
mat[i,j] = mat[j,i] =  sum((datos2$Aeropuerto==aers[i]) & (datos2$Origen...Destino==aers[j]))
}
}
mat
colnames(mat) = aers
row.names(mat) = aers
mat
for(i in 1:length(aers)){
for(j in 1:length(aers)){
mat[i,j]  =  sum((datos2$Aeropuerto==aers[i]) & (datos2$Origen...Destino==aers[j]))
}
}
mat
heatmap(mat)
ggplot(mat)
ggplot(as.data.frame(mat))
as.data.frame(mat)
ggplot(as.data.frame(mat))
ggplot(as.data.frame(mat)) + geom_tittle()
ggplot(as.data.frame(mat)) +
geom_tile() +
theme_ipsum()
ggplot(mat,aes(X,Y,fill=Z))
colnames(mat)
colnames(as.data.frame(mat))
ggplot(datos2,aes(Aeropuerto,Origen...Destino,fill=Z))
plot(mat)
heatmap(mat)
heatmap(mat,Colv = NA, Rowv = NA)
heatmap(mat,Colv = NA, Rowv = NA, scale="column")
#heatmap(mat,Colv = NA, Rowv = NA, scale="column")
library(heatmaply)
#heatmap(mat,Colv = NA, Rowv = NA, scale="column")
install.packages(heatmaply)
library(heatmaply)
#heatmap(mat,Colv = NA, Rowv = NA, scale="column")
install.packages(heatmaply)
#heatmap(mat,Colv = NA, Rowv = NA, scale="column")
install.packages('heatmaply')
#heatmap(mat,Colv = NA, Rowv = NA, scale="column")
library(heatmaply)
heatmaply(mat)
heatmaply(mat,cellnote=mat)
heatmaply(mat,cellnote=mat, Rowv = NA)
heatmaply(mat,cellnote=mat, Rowv = NA, Colv = NA)
heatmaply(mat,cellnote=mat, Rowv = NA, Colv = NA, scale="column")
heatmaply(mat,cellnote=mat, Rowv = NA, Colv = NA, scale="column", col_dend_up=TRUE)
help("heatmaply")
heatmaply(mat,cellnote=mat, Rowv = NA, Colv = NA, scale="column", col_dend_up=TRUE)%>%
layout(xaxis = list(side = "top"))
heatmaply(mat,cellnote=mat, Rowv = NA, Colv = NA, scale="column", col_dend_up=TRUE, xlab="Aeropuerto", ylab="Origen/Destino")%>%
layout(xaxis = list(side = "top"))
mat
heatmaply(mat,cellnote=mat, Rowv = NA, Colv = NA, scale="column", col_dend_up=TRUE, ylab="Aeropuerto", xlab="Origen/Destino")%>%
layout(xaxis = list(side = "top"))
library(ggplot2)
aersA = unique(datos2$Aeropuerto)
aersB = unique(datos2$Origen...Destino)
mat = matrix(nrow = length(aersA), ncol = length(aersB))
colnames(mat) = aersA
library(ggplot2)
aersA = unique(datos2$Aeropuerto)
aersB = unique(datos2$Origen...Destino)
mat = matrix(nrow = length(aersA), ncol = length(aersB))
row.names(mat) = aersB
aersA = unique(datos2$Aeropuerto)
aersB = unique(datos2$Origen...Destino)
aersA
aersB
mat
row.names(mat) = aersA
colnames(mat) = aersB
for(i in 1:length(aersA)){
for(j in 1:length(aersB)){
mat[i,j]  =  sum((datos2$Aeropuerto==aers[i]) & (datos2$Origen...Destino==aers[j]))
}
}
help("heatmaply")
heatmaply(mat,cellnote=mat, Rowv = NA, Colv = NA, scale="column", col_dend_up=TRUE, ylab="Aeropuerto", xlab="Origen/Destino")%>%
layout(xaxis = list(side = "top"))
for(j in 1:length(aersA)){
mat[i,j]  =  sum((datos2$Aeropuerto==aers[i]) & (datos2$Origen...Destino==aers[j]))
}
heatmaply(mat,cellnote=mat, Rowv = NA, Colv = NA, scale="column", col_dend_up=TRUE, ylab="Aeropuerto", xlab="Origen/Destino")%>%
layout(xaxis = list(side = "top"))
mat[i,j]  =  sum((datos2$Aeropuerto==aers[j]) & (datos2$Origen...Destino==aers[i]))
for(i in 1:length(aersA)){
for(j in 1:length(aersB)){
mat[i,j]  =  sum((datos2$Aeropuerto==aers[j]) & (datos2$Origen...Destino==aers[i]))
}
}
heatmaply(mat,cellnote=mat, Rowv = NA, Colv = NA, scale="column", col_dend_up=TRUE, ylab="Aeropuerto", xlab="Origen/Destino")%>%
layout(xaxis = list(side = "top"))
mat
length
length(aersB)
mat[i,j]  =  sum((datos2$Aeropuerto==aersA[i]) & (datos2$Origen...Destino==aersB[j]))
library(ggplot2)
aersA = unique(datos2$Aeropuerto)
aersB = unique(datos2$Origen...Destino)
mat = matrix(nrow = length(aersA), ncol = length(aersB))
row.names(mat) = aersA
colnames(mat) = aersB
for(i in 1:length(aersA)){
for(j in 1:length(aersB)){
mat[i,j]  =  sum((datos2$Aeropuerto==aersA[i]) & (datos2$Origen...Destino==aersB[j]))
}
}
#heatmap(mat,Colv = NA, Rowv = NA, scale="column")
library(heatmaply)
help("heatmaply")
heatmaply(mat,cellnote=mat, Rowv = NA, Colv = NA, scale="column", col_dend_up=TRUE, ylab="Aeropuerto", xlab="Origen/Destino")%>%
layout(xaxis = list(side = "top"))
heatmaply(mat,cellnote=mat, Rowv = NA, Colv = NA, col_dend_up=TRUE, ylab="Aeropuerto", xlab="Origen/Destino")%>%
layout(xaxis = list(side = "top"))
aersB - arsA
aersB - aersA
aersA in aersB
aersA
aersB
for(x in aersB){
if(not x in aersA)
if( x in aersA)
if(count((aersA==x))==0)
for(x in aersB){
if(count((aersA==x))==0)
aersC = c(aersC,x)
}
x
aersB
print(x)
for(x in aersB){
print(x)
if(count((aersA==x))==0)
{
aersC = c(aersC,x)
}
}
for(x in aersB){
print(x)
#if(count((aersA==x))==0)
#{
#  aersC = c(aersC,x)
#}
}
aersA
split(aersA," ")
split(aersA)
split(aersA,' ')
split(aersA,' ')==x
aersA==x)
aersA==x
count(aersA==x)
for(x in aersB){
print(x)
if(sum(aersA==x)==0)
{
aersC = c(aersC,x)
}
}
aersC
for(x in aersB){
print(x)
if(sum(aersA==x)==0)
{
aersC = c(aersC,x)
}
}
aersC = c()
aersC
aersC = c()
aersC
aersC = c('')
aersC
for(x in aersB){
print(x)
if(sum(aersA==x)==0)
{
aersC = c(aersC,x)
}
}
length(aersC)
aersA
aersB
aersC = NULL
for(x in aersB){
print(x)
if(sum(aersA==x)==0)
{
if(is.null(aersC)) aersC = c(x)
else aersC = c(aersC,x)
}
}
aersA
aersB
aersC = NULL
for(x in aersB){
if(sum(aersA==x)==0)
{
if(is.null(aersC)) aersC = c(x)
else aersC = c(aersC,x)
}
}
print(aersC)
aersC = NULL
for(x in aersB){
if(sum(aersA==x)==0)
{
if(is.null(aersC)) aersC = c(x)
else aersC = c(aersC,x)
}
}
print(aersC)
aersC = NULL
for(x in aersB){
if(sum(aersA==x)==0)
{
if(is.null(aersC)) aersC = c(x)
else aersC = c(aersC,x)
}
}
print(aersC)
sum(datos2$Aeropuerto==datos2$Origen...Destino)
length(datos2$Aeropuerto)
length(datos2$Aeropuerto)
sum(datos2$Aeropuerto==datos2$Origen...Destino)
length(datos2$Aeropuerto)
library(ggplot2)
aersA = unique(datos2$Aeropuerto)
aersB = unique(datos2$Origen...Destino)
mat = matrix(nrow = length(aersA), ncol = length(aersB))
row.names(mat) = aersA
colnames(mat) = aersB
for(i in 1:length(aersA)){
for(j in 1:length(aersB)){
mat[i,j]  =  sum((datos2$Aeropuerto==aersA[i]) & (datos2$Origen...Destino==aersB[j]))
}
}
#heatmap(mat,Colv = NA, Rowv = NA, scale="column")
library(heatmaply)
help("heatmaply")
heatmaply(mat,cellnote=mat, Rowv = NA, Colv = NA, col_dend_up=TRUE, ylab="Aeropuerto", xlab="Origen/Destino")%>%
layout(xaxis = list(side = "top"))
